name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --memory=7128m
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up .env file
        run: echo "${{ secrets.APP_ENV }}" | base64 -d > .env

      - name: Log in to DigitalOcean Container Registry
        run: echo "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u ${{ secrets.DIGITALOCEAN_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/${{ github.event.repository.name }}:${{ secrets.IMAGE_TAG }} .

      - name: Push Docker image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}/${{ github.event.repository.name }}:${{ secrets.IMAGE_TAG }}

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSPHRASE }}
          script: |
            # Set environment variables
            export IMAGE_NAME=${{ github.event.repository.name }}
            export REGISTRY=registry.digitalocean.com/${{ secrets.DIGITALOCEAN_REGISTRY_NAME }}
            export IMAGE_TAG=${{ secrets.IMAGE_TAG }}
            export GITHUB_SHA=$(echo $GITHUB_SHA | head -c7)
            
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_USERNAME }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $REGISTRY
            
            # Stop running container
            docker stop $IMAGE_NAME || true
            
            # Remove old container
            docker rm $IMAGE_NAME || true
            
            # Run a new container from the new image
            docker run -d \
              --restart always \
              --name $IMAGE_NAME \
              -p 3000:3000 \
              $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
              
            # Remove old images except the current one
            docker image prune -f
            echo "Unused images deleted"
            
            yes | doctl registry garbage-collection start ${{ secrets.DIGITALOCEAN_REGISTRY_NAME }} --include-untagged-manifests
            echo "Deleted garbage-collection"

            # Logout from Docker registry
            docker logout $REGISTRY
            